/*
  Copyright (C) 2014 Juhana Virkkala <juhana.virkkala@toimii.fi>

  All rights reserved.

  You may use this file under the terms of BSD license as follows:

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Jolla Ltd nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

import QtQuick 2.0
import Sailfish.Silica 1.0
import QtQuick.LocalStorage 2.0 as Ls


Page {
    id: page
    property string dbName: "TrackFIdb"
    property string dbDescription: dbName
    property string dbVersion: "1.0"

    Component.onCompleted: {
        reloadhistory();
    }

    function updatedet(index,koodi) {

        historyModel.set(index,{"det": "<i>"+qsTr("updating")+"..</i>" });

        var doc = new XMLHttpRequest();
        doc.onreadystatechange = function() {
            if (doc.readyState == XMLHttpRequest.DONE) {
                var rivit=doc.responseText.split("\n");

                var active=0;
                var header="";
                var det="";

                var hdata="";
                var phactive=0;

                for (var ii = 0; ii < rivit.length; ++ii) {
                    var rivi=rivit[ii];
                    var riviplain=rivi.replace(/<[^>]+>/gm,"").replace(/&nbsp;/gm,"").replace(/[\ ]{2,100}/gm," ");

                    if (rivi.match("<div class=\"placeholder\">")) phactive=1;
                    if (phactive == 1 && riviplain.length > 2) {
                        if (rivi.match("<h2>")) header=riviplain
                    }
                    if (phactive == 1 && rivi.match("<\/div>")) {
                        phactive=0;
                        //historyModel.append({"header": hdata, "det": "", "datetime": "","type": "header"})
                    }


                    if ( rivi.match("shipment-event-table-cell")) active=1;
                    if ( active == 1 ) {
                        if (rivi.match("shipment-event-table-header") && header=="") header=riviplain;
                        if (rivi.match("shipment-event-table-data") && det=="") {
                                if (!rivi.match("[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}")) det=riviplain;
                        }
                        if (rivi.match("<\/td>")) {
                            active=0;
                            //resultModel.append({"header": header, "dataa": dataa, "datetime": datetime, "type": "item"});
                        }
                    }

                }
                //busyIndicator.running=false
                //return(header + "<br>" + det);
                var str=header + " " + det
                historyModel.set(index,{"det": str });
                //historyModel.set(index,{"det": det });
                //console.log("Set " + index + " : " + str);
            }
        }



        doc.open("GET", postiURL(koodi));
        doc.send();
        //console.log("ready");
    }


    function deleteitm(trackid) {
        var db = getPreparedDatabase();
        db.transaction(
           function(tx) {
               var rs = tx.executeSql('DELETE FROM history WHERE trackid=?;', [trackid]);
                    if (rs.rowsAffected > 0) {
                        console.log("Deleted: " + trackid + " [OK]")
                    } else {
                        console.error("ERROR: Failed to delete : " + trackid );
                    }
                }
          );
    }

    function populatedets() {
        for (var i=0; i < historyModel.count; i++) {
            console.log("UPD: " + historyModel.get(i).title);
            updatedet(i,historyModel.get(i).title);
        }
    }

    function getPreparedDatabase() {
        var db = Ls.LocalStorage.openDatabaseSync(dbName, dbVersion, dbDescription);
        db.transaction(
            function(tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS history (trackid, statusstr, detstr, timestamp, PRIMARY KEY(trackid))');
            }
                    );
        return db;
    }


    function reloadhistory() {
        var db = getPreparedDatabase();
        var res = [];
        console.log("Reload history");
        db.transaction(
                function(tx) {
                    var rs = tx.executeSql('SELECT * FROM history ORDER BY timestamp DESC;');
                    for(var i = 0; i < rs.rows.length; i++) {
                        historyModel.set(i, {"title": rs.rows.item(i).trackid , "det": "<i>Ei tilatietoja</i>" });
                    }
                    if (rs.rows.length!=0) {
                        historyhead.visible=true;
                        historytip.visible=false;
                    } else{
                        historytip.visible=true;
                        historyhead.visible=false;
                    }
                }
            );
        populatedets();
        return res;
    }

    function savehistory(trackid,status) {
        historytip.visible=false;
        var timestamp=Qt.formatDateTime(new Date(), "yyyyMMddHHmmss");
        var db = getPreparedDatabase();
        db.transaction(
           function(tx) {
               var rs = tx.executeSql('INSERT OR REPLACE INTO history VALUES (UPPER(?),?,?,?);', [trackid, status,"",timestamp]);
                    if (rs.rowsAffected > 0) {
                        console.log("saved: " + trackid + " [OK]")
                    } else {
                        console.error("ERROR: Failed to save : " + trackid );
                    }
                }
          );
        reloadhistory();
    }


    SilicaFlickable {
        anchors.fill: parent
        PullDownMenu {
            MenuItem {
                text: qsTr("pulldown_about")
                onClicked: pageStack.push("AboutPage.qml");
            }
            MenuItem {
                text: qsTr("pulldown_update")
                onClicked: populatedets()
            }
        }
        contentHeight: column.height

        Column {
            id: column

            width: page.width
            spacing: Theme.paddingLarge
            PageHeader {
                id: phead
                title: qsTr("track_item")

            }

            TextField {
                id: koodiInput
                width: parent.width
                inputMethodHints: Qt.ImhNoPredictiveText // Qt.ImhPreferUppercase | Qt.ImhNoAutoUppercase
                label: qsTr("tracking_code")
                placeholderText: qsTr("enter_code")
                validator: RegExpValidator { regExp: /^[0-9a-z]{5,100}$/i }
                anchors.horizontalCenter: parent.horizontalCenter
                EnterKey.enabled: text.length > 4
                EnterKey.iconSource: "image://theme/icon-m-enter-accept"
                EnterKey.onClicked: {
                    savehistory(koodiInput.text,"");
                    var props = {
                         "koodi": koodiInput.text
                    };
                    text="";
                    pageStack.push("Details.qml", props);
                }
            }

            Label {
                id: historytip
                width: parent.width - (Theme.paddingMedium*2)
                anchors.horizontalCenter: parent.horizontalCenter
                text: qsTr("first_tip")
                color: Theme.secondaryHighlightColor
                font.pixelSize: Theme.fontSizeLarge
                wrapMode: Text.WordWrap
            }

            SectionHeader {
                id: historyhead
                text: qsTr("history");
            }

            SilicaListView {
                id: lista
                width: parent.width
                height: 600


                model: ListModel {
                    id: historyModel
                    ListElement { title: ""; det: " " }
                }
                delegate: ListItem {
                    menu: contextMenu
                    id: listitem
                    contentHeight: htitle.height + hdet.height + 10
                    onClicked: {
                         var props = {
                             "koodi": title
                         };
                         pageStack.push("Details.qml", props);
                    }
                    onPressed: Qt.inputMethod.hide();
                    ListView.onRemove: animateRemoval(listitem)
                    visible: title!=""

                    function remove(title) {
                        remorseAction(qsTr("remorse_deleting"), function() {
                            lista.model.remove(index);
                            deleteitm(title);
                        },3000);
                    }
                    Rectangle {
                        id: erotin
                        color: Theme.highlightColor
                        opacity: 0.2
                        height: 40
                        width: parent.width
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Label {
                            id: htitle
                            text: title
                            font.capitalization: Font.AllUppercase
                            width: parent.width - (Theme.paddingMedium*2)
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.top: erotin.top
                            color: Theme.secondaryColor
                    }
                    Label {
                            id: hdet
                            anchors.top: htitle.bottom
                            color: Theme.primaryColor
                            font.pixelSize: Theme.fontSizeSmall
                            text: det
                            width: parent.width - (Theme.paddingMedium*2)
                            anchors.horizontalCenter: parent.horizontalCenter
                            wrapMode: Text.WordWrap
                    }
                    Component {
                    id: contextMenu
                        ContextMenu {
                            MenuItem {
                                text: qsTr("context_copy")
                                onClicked: Clipboard.text = title
                            }
                            MenuItem {
                                text: qsTr("context_remove")
                                onClicked: remove(title)
                            }
                        }
                    }
               }

               VerticalScrollDecorator {}

            }

        }
    }
}
